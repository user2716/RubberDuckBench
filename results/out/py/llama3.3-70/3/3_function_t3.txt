To determine whether to use UTF-8 or ASCII as the default encoding for decoding the `host` header, it's essential to consider the nature of HTTP headers and domain names. Domain names, which are typically found in the `Host` header, can be internationalized through the use of Internationalized Domain Names (IDNs). However, even with IDNs, the actual characters used in domain names are usually limited and standardized.

ASCII is sufficient for decoding most domain names because the letters and numbers that make up standard domain names are part of the ASCII character set. The primary reason to choose ASCII over UTF-8 in this context is to avoid potential issues related to non-standard or maliciously crafted domain names that could exploit the broader range of characters allowed by UTF-8, potentially leading to security vulnerabilities.

However, considering modern practices and the need for internationalization, if there's a chance that the `host` might contain Unicode characters (for example, in IDNs), using UTF-8 could provide better support. Yet, it's crucial to remember that domain names themselves are usually encoded in Punycode when they include non-ASCII characters, which is then decoded by browsers or other clients. Therefore, expecting a raw UTF-8 encoded string in the `Host` header might not align with standard practices.

Given these considerations and focusing strictly on decoding the `host` header as typically received from an HTTP request, ASCII remains a safe choice to ensure compatibility and avoid potential issues with non-standard domain names or headers. 

<answer>Using UTF-8 instead of ASCII for decoding host could provide broader character support but may also introduce unnecessary complexity and potential security risks. Given standard practices around domain names, ASCII is generally sufficient and safer for this specific purpose. The choice ultimately depends on the expected format of the data in the `host` header.</answer>