To determine whether to use UTF-8 or ASCII for decoding the `host` header, it's essential to consider the specifications and common practices related to HTTP headers. The `Host` header in HTTP is defined by RFC 7230, which specifies that headers can contain a limited set of characters, mainly ASCII characters. 

However, when considering internationalized domain names (IDNs), they are encoded using Punycode (RFC 5891) for transmission in the DNS system and may be represented in their Unicode form in certain contexts. But even then, the transmission over HTTP still relies on these encodings being properly handled to ensure compatibility.

Given that UTF-8 is a superset of ASCII and can handle a broader range of characters, including those necessary for internationalized domain names when they are not Punycode encoded (e.g., in display or local processing contexts), it might seem like using UTF-8 could be beneficial. 

However, the critical point here is that when decoding bytes to string in the context of HTTP headers like `Host`, we're dealing with data that should already conform to specific encoding expectations based on the protocol's requirements and common practices.

<answer>Using ASCII as the default encoding for decoding the host header is appropriate because HTTP headers are generally expected to be ASCII-encoded. Switching to UTF-8 might introduce compatibility issues or misinterpretations unless explicitly required by a specific use case or standard that allows non-ASCII characters in host headers, which is not commonly the case in standard HTTP implementations.</answer>