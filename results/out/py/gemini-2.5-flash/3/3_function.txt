Using ASCII as the decoding standard for the `Host` header is generally correct and aligns with HTTP specifications.

The `Host` header, as defined in HTTP/1.1 (RFC 7230), is primarily an ASCII-based field. Domain names within the `Host` header that are internationalized (IDNs) are first converted to their Punycode representation, which is an ASCII string (e.g., `xn--example`). Therefore, if the `Host` header contains non-ASCII bytes, it indicates a malformed or non-standard header. Decoding it with `'ascii'` will raise a `UnicodeDecodeError` if non-ASCII bytes are present, which serves as a good indicator of an invalid header. Using UTF-8 would allow non-standard characters to pass through, potentially leading to issues or vulnerabilities if the reconstructed URL is used in contexts that strictly enforce HTTP header standards.

<answer>
No, UTF-8 should not be used as the default encoding for decoding the `Host` header. The `Host` header, as per HTTP specifications (RFC 7230), is expected to contain ASCII characters. Internationalized Domain Names (IDNs) are represented in the `Host` header using Punycode, which also results in an ASCII string. Using `ascii` for decoding ensures compliance with the standard; if non-ASCII bytes are encountered, it correctly flags the header as malformed.
</answer>