To address this question, let's analyze the provided code segment and understand the role of `compact_times()` and its implications on KPI (Key Performance Indicator) sets, both cumulative and non-cumulative.

The method `recalculate` appears to be part of a class responsible for calculating various performance metrics, including averages, standard deviations, and percentiles, based on collected data. The `compact_times()` method, called within `recalculate`, likely optimizes or updates the time-related data, but its exact functionality isn't provided.

### Understanding `compact_times()`

Without the explicit implementation of `compact_times()`, we can infer its purpose from the context:
- It seems to be related to optimizing or updating time-based data.
- It's crucial for maintaining data consistency and efficiency, possibly by removing outdated or redundant entries.

### Analyzing the Question

The question revolves around the strategy for calling `compact_times()`:
- **On every KPIset**: This approach ensures that every set of KPIs, including non-cumulative ones, has its time data optimized. This could be beneficial for maintaining a lightweight and efficient dataset, especially if KPI sets are frequently updated or if storage is a concern.
- **Only on cumulative KPIsets**: This strategy targets the optimization of time data specifically for cumulative KPIs, which are often used for trend analysis and performance monitoring over time. Cumulative KPIs typically aggregate data over a period, making them more critical for long-term analysis.

### Decision Factors

When deciding which approach to take, consider the following:
- **Data Volume and Frequency of Updates**: If you're dealing with a high volume of data and frequent updates, optimizing every KPI set might be necessary for performance.
- **Data Analysis Requirements**: If your analysis primarily focuses on cumulative trends, optimizing only cumulative KPI sets might suffice.
- **System Resources**: Optimizing every KPI set could be resource-intensive. If resources are limited, focusing on cumulative KPI sets might be more feasible.

### Conclusion

Given the information and typical use cases, calling `compact_times()` on **only cumulative KPIsets** seems reasonable if:
- Your primary analysis revolves around trends over time.
- You're dealing with a large dataset and want to prioritize optimization where it has the most significant impact.

However, if your application requires real-time or near-real-time data optimization across all KPI sets for performance or storage reasons, then calling it on **every KPIset** could be justified.

<answer>
You should call compact_times() on cumulative KPIsets if your analysis primarily focuses on trends over time and you're dealing with a large dataset. However, if real-time optimization across all KPI sets is crucial for your application, then call it on every KPIset.
</answer>
</end_header_id|end_header_id