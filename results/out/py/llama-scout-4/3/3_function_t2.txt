To address the question of whether to use UTF-8 instead of ASCII as the default encoding when decoding the host, let's consider the implications and requirements.

The current code uses ASCII for decoding the host:
```python
host = host.decode('ascii')
```
Using ASCII as the encoding when decoding the host can lead to a `UnicodeDecodeError` if the host string contains characters that are not part of the ASCII character set. This is because ASCII can only represent a limited range of characters.

On the other hand, UTF-8 is a more inclusive encoding standard that can represent a wide range of characters from various languages. It is a common and versatile encoding that can handle most use cases.

However, in the context of URLs and hostnames, the specification (RFC 3986 for URLs and RFC 1123 for hostnames) implies that only a subset of ASCII characters should be used. This suggests that strictly speaking, using UTF-8 for decoding the host might not be necessary or even correct, as hostnames are typically expected to be ASCII-only.

That being said, in practice, you might encounter hostnames or URLs that include non-ASCII characters, especially if you're dealing with internationalized domain names (IDNs). In such cases, using UTF-8 or a library that can handle IDNs properly would be more appropriate.

Considering the original code and the question, using UTF-8 instead of ASCII could be beneficial for handling a broader range of characters, but it might also introduce complexities related to standards compliance and backward compatibility.

<answer>
Using UTF-8 instead of ASCII for decoding the host could provide more flexibility, but it may also introduce compatibility issues with certain standards and existing systems. The choice depends on the specific requirements and constraints of the project. 
</answer>