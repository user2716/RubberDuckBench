To address the question of whether to use UTF-8 instead of ASCII as the default encoding when decoding the host, let's consider the context and implications.

The current code snippet decodes the host using ASCII, which might lead to issues if the host contains characters outside the ASCII range. Using UTF-8 as the default encoding would be more inclusive and capable of handling a broader range of characters.

However, there are a few points to consider:

1. **RFC 3986**: The URI (Uniform Resource Identifier) syntax, as defined in RFC 3986, suggests that URIs should be encoded using UTF-8. But, historically, HTTP has been more lenient and often defaults to ASCII for simplicity and backward compatibility.

2. **HTTP/1.1 Specification**: The specification (RFC 7230) mentions that the Host header field in HTTP/1.1 can contain a URI's authority, which might include internationalized domain names (IDNs). For IDNs, UTF-8 encoding is used.

3. **Practical Considerations**: Most modern systems and libraries handle UTF-8 encoding well. However, using UTF-8 might expose you to issues if your system isn't fully equipped to handle characters outside the ASCII range.

Considering these points, using UTF-8 instead of ASCII for decoding the host could be beneficial for supporting a wider range of characters and internationalization. However, it also depends on the specific requirements and constraints of your application.

<answer>
Using UTF-8 instead of ASCII for decoding the host could be a good practice, especially if your application needs to support internationalized domain names or characters beyond the ASCII range. However, consider your specific use case and system's capabilities before making a change.
</answer>