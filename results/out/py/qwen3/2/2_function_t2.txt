<think>
Okay, let's see. The user is asking whether they should call compact_times() on every KPIset or only cumulative ones. The code segment provided has a method called recalculate, which starts with self._compact_times().

First, I need to understand what compact_times does. Since it's a method of the KPIset class, maybe it's used to clean up or compress the time data. The question is about when to call this method. 

Looking at the code, the recalculate method is responsible for computing averages, standard deviation, and percentiles. The compact_times is called at the very beginning of this method. So, perhaps compact_times is a preprocessing step that prepares the data for these calculations. 

If compact_times is meant to process the time data (like merging or aggregating entries), then it might be necessary before calculating the stats. But the question is whether this should be done for every KPIset or only cumulative ones. 

The term "cumulative KPIsets" suggests that there might be different types of KPIsets. Maybe some are cumulative (aggregating over time) and others are individual. If compact_times is part of the data preparation for calculating the stats, then it's likely needed for all KPIsets, not just cumulative ones. Because even non-cumulative KPIsets might need their data compacted before computing averages and percentiles. 

But maybe compact_times is specific to cumulative data. For example, if the KPIset is cumulative, it might have accumulated data that needs to be compacted. However, the code shows that compact_times is called unconditionally at the start of recalculate. So, if the recalculate method is called on every KPIset, then compact_times is called on all of them. 

Alternatively, maybe compact_times is only relevant for cumulative KPIsets. But the code doesn't show any condition on that. The question is asking whether it should be called on every KPIset or only cumulative. The answer depends on the purpose of compact_times. If compact_times is for data preparation that's needed for all KPIsets, then every KPIset should call it. If it's only needed for cumulative ones, then only those should. 

But since the code is in the recalculate method, which is part of the KPIset's logic, and the method is called on the KPIset, perhaps the compact_times is a necessary step for all KPIsets. However, the user's question suggests that there's a choice here. 

Looking back, the code starts with self._compact_times(). So, if the recalculate method is called on every KPIset, then compact_times is called on every instance. But the question is whether it's needed for every KPIset or only cumulative ones. 

If the KPIset is cumulative, it might have accumulated data that needs compacting. But if the KPIset is not cumulative, maybe compact_times isn't needed. However, the code doesn't have a condition checking if it's cumulative. Therefore, the answer might be that compact_times should be called on every KPIset, as the code currently does. But the question is phrased as a choice, implying that maybe it's not necessary for all. 

Alternatively, maybe compact_times is only needed for cumulative KPIsets. But the code doesn't check that. So the answer would be that the code as written calls compact_times on every KPIset, but the question is whether it should. The answer depends on the purpose of compact_times. If compact_times is part of the data preparation for all KPIsets, then yes. If it's only for cumulative, then only those. However, without more context on what compact_times does, the safest answer is that the code currently calls it on every KPIset, but the decision should be based on whether the data preparation is required for all cases.
</think>

The `compact_times()` method is called unconditionally at the start of the `recalculate` method. This suggests it is part of the data preparation step required for all `KPIset` instances, regardless of whether they are cumulative or not. However, the question implies a design choice: whether this step is necessary for every `KPIset` or only cumulative ones. 

If `compact_times()` is intended to preprocess or aggregate time data (e.g., merging overlapping intervals or normalizing timestamps), it may be essential for all `KPIset` instances to ensure consistent statistical calculations. However, if `compact_times()` is specific to cumulative data (e.g., consolidating aggregated metrics), it should only be called on cumulative `KPIset` instances. 

The current implementation applies it to all, but the decision should align with the purpose of `compact_times()`. If it is a general preprocessing step, it should be called on every `KPIset`. If it is only relevant to cumulative data, the code should conditionally call it based on the `KPIset` type. 

<answer>  
The code currently calls `compact_times()` on every `KPIset`, but the decision should depend on whether this method is required for all `KPIset` instances or only cumulative ones. If `compact_times()` is a general preprocessing step, it should be called on every `KPIset`. If it is specific to cumulative data, the code should conditionally invoke it based on the `KPIset` type.  
</answer>